/** 
 * Generated by erpcgen {$erpcVersion} on {$todaysDate}.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
 {% set iface = interface %}

import '{$groupPackage}/interfaces/I{$iface.name}.g.dart';

{% if not empty(group.symbolsMap.structs) %}
{% for s in group.symbolsMap.structs %}
import '{$groupPackage}/common/structs/{$s.name}.g.dart';
{%  endfor -- group.symbolsMap.structs %}
{% elif not empty(structs)%}
{% for s in structs %}
import '{$groupPackage}/common/structs/{$s.name}.g.dart';
{%  endfor -- structs %}
{% endif %}

{% if not empty(enums)%}
{% for s in enums %}
import '{$groupPackage}/common/enums/{$s.name}.g.dart';
{%  endfor -- enums %}
{% endif %}

{%  for inc in includes %}
import {$inc};
{%  endfor -- includes %}

import 'package:erpc/erpc_lib.dart';

class {$iface.name}Client implements I{$iface.name} {
    final ClientManager _clientManager;

    {$iface.name}Client(this._clientManager);

{% for fn in iface.functions %}
{$loop.addNewLineIfNotLast}
    @override
    {$fn.prototype} async {
        // Create request
        RequestContext request = _clientManager.createRequest({% if fn.isOneway %}true{% else %}false{% endif %});
        Codec codec = request.codec;

        // Write message info
        codec.startWriteMessage(MessageInfo(
                type: MessageType.{% if fn.isReturnValue %}kInvocationMessage{% else %}kOnewayMessage{% endif %},
                service: I{$iface.name}.SERVICE_ID,
                request: I{$iface.name}.{$upper(fn.name)}_ID,
                sequence: request.sequence));

        // Write message data
{%  for p in fn.inParameters if not p.serializedViaMember %}
{%     if p.isNullable %}
        if({$p.name} == null) {
            codec.writeNullFlag(1);
        } else {
            codec.writeNullFlag(0);
{$          addIndent("            ", p.call.encode(p.call))}
        }
{%     else %}
        Utils.checkNotNull({$p.name}, "{$p.name} is null");
        {% if p.call.isReference%}Utils.checkNotNull({$p.name}.get(), "{$p.name}.value is null");{% endif %}
{$      addIndent("        ", p.call.encode(p.call))}
{%     endif -- isNullable %}
{% endfor -- inParams %}

        // Perform request
        await _clientManager.performRequest(request);

{%  if not fn.isOneway %}
        // Read out parameters
{% for p in fn.outParameters if not p.serializedViaMember %}
{%     if p.isNullable %}
        if(!codec.readNullFlag()) {
{$         addIndent("            ", p.call.decode(p.call))}
        }
{%     else %}
{$         addIndent("        ", p.call.decode(p.call))}
{%     endif -- isNullable %}
{% endfor -- outParams %}
{%      if fn.isReturnValue && fn.returnValue.type.type != "void" %}

        // Read return value
{%      if fn.returnValue.isNullable %}
        try {
{%      endif -- returnValue.isNullable %}
{$      addIndent("        ",  fn.returnValue.call.decode(fn.returnValue.call))}
        return {$fn.returnValue.call.name};
{%      if fn.returnValue.isNullable %}
        } catch (e) { print("Client -> read error=$e"); return null; }
{%      endif -- returnValue.isNullable %}
{%      endif -- returnValue %}
{%  endif -- oneway %}
    }
{% endfor -- fn %}
}
