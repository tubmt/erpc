{% if mlComment != "" %}
{$mlComment}

{% endif %}
/** 
 * Generated by erpcgen {$erpcVersion} on {$todaysDate}.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */ 
package {$groupPackage}.common.structs

{% if not empty(group.symbolsMap.structs) %}import {$groupPackage}.common.structs.*{% elif not empty(structs)%}import {$groupPackage}.common.structs.*{% endif %}
{% if not empty(enums)%}import {$groupPackage}.common.enums.*{% endif %}
import io.github.embeddedrpc.erpc.auxiliary.Reference
import io.github.embeddedrpc.erpc.auxiliary.Utils
import io.github.embeddedrpc.erpc.codec.Codec

{%  for inc in includes %}
import {$inc}
{%  endfor -- includes %}

{% set s = struct %}
{$>(s.mlComment or s.ilComment)}
class {$s.name} (
{% for m in s.members if not m.lengthForMember %}
{%   if m.mlComment or m.ilComment %}
   {$m.mlComment or m.ilComment}
{%   endif %}
    var {$m.call.name}: {$m.call.type.typeName}{% if m.isNullable %}?{% endif %},
{% endfor -- members %}
) {

    fun write(codec: Codec) {
{% for m in s.members if not m.serializedViaMember %}
{%     if m.isNullable %}
        if(this.{$m.name} == null) {
            codec.writeNullFlag(1)
        } else {
            codec.writeNullFlag(0)
{$          addIndent("            ", m.call.encode(m.call))}
        }
{%     else %}
        Utils.checkNotNull({$m.name}, "{$m.name} is null")
        {% if m.call.isReference%}Utils.checkNotNull({$m.name}.get(), "{$m.name}.value is null"){% endif %}
{$      addIndent("        ", m.call.encode(m.call))}
{%     endif -- isNullable %}
{% endfor -- members %}
    }

    companion object {
        fun read(codec: Codec): {$s.name} {
            val _struct: {$s.name} = {$s.name}(
{% for m in s.members if not m.serializedViaMember %}
{% set name = m.call.name%}
{%     if m.isNullable %}
{% set m.call.isNeedProperty = false %}
            if(!codec.readNullFlag()) {
{$         addIndent("                 ", m.call.decode(m.call))}
            } else null,
{%     else %}
{$         addIndent("             ", m.call.decode(m.call))},
{%     endif -- isNullable %}
{% endfor -- members %}
            )
            return _struct
        }
    }

{# create read-only properties for @length counts #}
{% for m in s.members if m.lengthForMember %}
    public int {$m.name}() {
        return {$m.lengthForMember}.size()
    }

{% endfor -- s.members %}
}
