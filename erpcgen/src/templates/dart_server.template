/** 
 * Generated by erpcgen {$erpcVersion} on {$todaysDate}.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
{% set iface = interface %}

import '{$groupPackage}/interfaces/I{$iface.name}.dart';

{% if not empty(group.symbolsMap.structs) %}
{% for s in group.symbolsMap.structs %}
import '{$groupPackage}/common/structs/{$s.name}.dart';
{%  endfor -- group.symbolsMap.structs %}
{% elif not empty(structs)%}
{% for s in structs %}
import '{$groupPackage}/common/structs/{$s.name}.dart';
{%  endfor -- structs %}
{% endif %}

{% if not empty(enums)%}
{% for s in enums %}
import '{$groupPackage}/common/enums/{$s.name}.dart';
{%  endfor -- enums %}
{% endif %}

import 'package:erpc/erpc_lib.dart';

{%  for inc in includes %}
import {$inc};
{%  endfor -- includes %}

/**
 * Testing abstract service class for simple eRPC interface.
 */
abstract class Abstract{$iface.name}Service
        extends Service
        implements I{$iface.name} {

    /**
     * Default constructor.
     */
    Abstract{$iface.name}Service() : super(I{$iface.name}.SERVICE_ID) {
{% for fn in iface.functions %}
        addMethodHandler(I{$iface.name}.{$upper(fn.name)}_ID, _{$fn.name}Handler);
{% endfor -- fn %}
    }

{% for fn in iface.functions %}
    void _{$fn.name}Handler(int sequence, Codec codec) async {
{%          for p in fn.parameters if not p.serializedViaMember %}
        {$p.call.type.typeName} {$p.name}{% if p.call.isReference %} = new {$p.call.type.typeName}(){% endif%};
{%          endfor %}

{%          for p in fn.inParameters if not p.serializedViaMember %}
{% set tmp = p.call.needTypeDeclaration%}
{% set p.call.needTypeDeclaration = false %}
{$ addIndent("        ", p.call.decode(p.call))}
{% set p.call.needTypeDeclaration = tmp %}
{%          endfor %}

        {%  if not fn.isOneway %}{% if fn.isReturnValue && fn.returnValue.type.type != "void" %}{$fn.returnValue.call.type.typeName} _result = await {% endif %}{% endif %}{$fn.name}({% for p in fn.parameters if not p.serializedViaMember %}{$p.name}{% if !loop.last%}, {% endif %}{% endfor %});

        codec.reset();

{%  if not fn.isOneway %}
        codec.startWriteMessage(MessageInfo(
                type: MessageType.kReplyMessage,
                service: serviceId,
                request: I{$iface.name}.{$upper(fn.name)}_ID,
                sequence: sequence)
        );

        // Read out parameters
{% for p in fn.outParameters if not p.serializedViaMember %}
{%     if p.isNullable %}
        if(!codec.readNullFlag()) {
{$         addIndent("            ", p.call.encode(p.call))}
        }
{%     else %}
{$         addIndent("        ", p.call.encode(p.call))}
{%     endif -- isNullable %}
{% endfor -- outParams %}
{%      if fn.isReturnValue && fn.returnValue.type.type != "void" %}
        // Read return value
{$      addIndent("        ",  fn.returnValue.call.encode(fn.returnValue.call))}
{%      endif -- returnValue %}
{%  endif -- oneway %}
    }
{% endfor -- fn %}

}

