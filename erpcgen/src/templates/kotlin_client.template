/** 
 * Generated by erpcgen {$erpcVersion} on {$todaysDate}.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
 {% set iface = interface %}
package {$groupPackage}.client

import {$groupPackage}.interfaces.I{$iface.name}
{% if not empty(group.symbolsMap.structs) %}import {$groupPackage}.common.structs.*{% elif not empty(structs)%}import {$groupPackage}.common.structs.*{% endif %}
{% if not empty(enums)%}import {$groupPackage}.common.enums.*{% endif %}

{%  for inc in includes %}
import {$inc}
{%  endfor -- includes %}

import io.github.embeddedrpc.erpc.auxiliary.MessageType
import io.github.embeddedrpc.erpc.auxiliary.MessageInfo
import io.github.embeddedrpc.erpc.auxiliary.RequestContext
import io.github.embeddedrpc.erpc.auxiliary.Reference
import io.github.embeddedrpc.erpc.auxiliary.Utils
import io.github.embeddedrpc.erpc.client.ClientManager
import io.github.embeddedrpc.erpc.codec.Codec

class {$iface.name}Client(val clientManager: ClientManager): I{$iface.name} {

{% for fn in iface.functions %}
{$loop.addNewLineIfNotLast}
    override {$fn.prototype} {
        // Create request
        val request = clientManager.createRequest({% if fn.isOneway %}true{% else %}false{% endif %})
        val codec = request.codec()

        // Write message info
        codec.startWriteMessage(MessageInfo(
                MessageType.{% if fn.isReturnValue %}kInvocationMessage{% else %}kOnewayMessage{% endif %},
                I{$iface.name}.SERVICE_ID,
                I{$iface.name}.{$upper(fn.name)}_ID,
                request.sequence()))

        // Write message data
{%  for p in fn.inParameters if not p.serializedViaMember %}
{%     if p.isNullable %}
        if({$p.name} == null) {
            codec.writeNullFlag(1)
        } else {
            codec.writeNullFlag(0)
{$          addIndent("            ", p.call.encode(p.call))}
        }
{%     else %}
        Utils.checkNotNull({$p.name}, "{$p.name} is null")
        {% if p.call.isReference%}Utils.checkNotNull({$p.name}.get(), "{$p.name}.value is null"){% endif %}
{$      addIndent("        ", p.call.encode(p.call))}
{%     endif -- isNullable %}
{% endfor -- inParams %}

        // Perform request
        clientManager.performRequest(request)

{%  if not fn.isOneway %}
        // Read out parameters
{% for p in fn.outParameters if not p.serializedViaMember %}
{%     if p.isNullable %}
        if(!codec.readNullFlag()) {
{$         addIndent("            ", p.call.decode(p.call))}
        }
{%     else %}
{$         addIndent("        ", p.call.decode(p.call))}
{%     endif -- isNullable %}
{% endfor -- outParams %}
{%      if fn.isReturnValue && fn.returnValue.type.type != "void" %}

        // Read return value
{%      if fn.returnValue.isNullable %}
        try {
{%      endif -- returnValue.isNullable %}
{% if fn.returnValue.type.type == "list" %}val{% endif %}{$      addIndent("        ",  fn.returnValue.call.decode(fn.returnValue.call))}
        return {$fn.returnValue.call.name}
{%      if fn.returnValue.isNullable %}
        } catch (e: Exception) { System.out.println("Client -> read error=" + e); return null }
{%      endif -- returnValue.isNullable %}
{%      endif -- returnValue %}
{%  endif -- oneway %}
    }
{% endfor -- fn %}
}
